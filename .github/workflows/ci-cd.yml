name: Laravel CI/CD for API (Docker + DigitalOcean)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠 Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: 📦 Install Dependencies
        run: |
          cd src
          composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔑 Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔧 Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:latest -f src/Dockerfile ./src
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: 🚀 Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: 📤 SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          envs: DOCKER_IMAGE,PROJECT_DIR,POSTGRESQL_DATABASE,POSTGRESQL_USERNAME,POSTGRESQL_PASSWORD,REDIS_PASSWORD,DO_SERVER_IP
          script: |
            set -e

            echo "📁 Setting up $PROJECT_DIR"
            echo "📂 Using PROJECT_DIR: $PROJECT_DIR"
            if [ ! -d "$PROJECT_DIR" ]; then
              mkdir -p $PROJECT_DIR
            fi
            cd $PROJECT_DIR

            echo "📦 Using Docker image: $DOCKER_IMAGE"

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            echo "📦 Pulling latest code safely..."
            if [ ! -d ".git" ]; then
              git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
            else
              git reset --hard
              git pull origin main
            fi

            if ! command -v envsubst &> /dev/null; then
              echo "🔧 Installing envsubst..."
              sudo apt update && sudo apt install -y gettext
            fi

            echo "📜 Checking .env file for docker-compose"
            if [ ! -f ".env" ]; then
              envsubst < .env.example > .env
              echo "✅ .env created"
            else
              echo "✅ .env already exists, skipping..."
            fi

            echo "📜 Checking Laravel src/.env file"
            if [ ! -f "src/.env" ]; then
              envsubst < src/.env.example > src/.env
              echo "✅ Laravel .env created"
            else
              echo "✅ Laravel .env already exists, skipping..."
            fi

            echo "🛑 Stopping running containers"
            docker-compose -f docker-compose.prod.yml down --remove-orphans

            echo "🧹 Cleaning up Docker system"
            docker system prune -af

            echo "🐳 Pulling latest image"
            docker pull $DOCKER_IMAGE:latest

            echo "🚀 Starting containers"
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "🔐 Checking APP_KEY"
            KEY=$(docker exec user_service_app php -r "echo env('APP_KEY');")
            if [ -z "$KEY" ] || [ "$KEY" = "null" ]; then
              echo "⚡ No APP_KEY found. Generating..."
              docker exec user_service_app php artisan key:generate --force
            else
              echo "✅ APP_KEY already set."
            fi

            echo "⏳ Waiting for Laravel to be ready..."
            attempts=0
            until docker exec user_service_app php artisan migrate:status > /dev/null 2>&1; do
              attempts=$((attempts+1))
              echo "⌛ Attempt $attempts: Laravel not ready..."
              if [ "$attempts" -ge 20 ]; then
                echo "❌ Timeout: Laravel not ready after $attempts attempts"
                docker logs user_service_app
                exit 1
              fi
              sleep 5
            done
            echo "✅ Laravel is ready!"

            echo "📦 Running migrations"
            docker exec user_service_app php artisan migrate --force

            echo "🔧 Optimizing config & routes"
            docker exec user_service_app php artisan optimize:clear
            docker exec user_service_app php artisan config:cache
            docker exec user_service_app php artisan route:cache

            echo "✅ Deployment Completed!"
