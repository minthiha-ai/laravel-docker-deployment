name: Laravel CI/CD for API (Docker + DigitalOcean)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-push:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üõ† Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: üì¶ Install PHP Dependencies
        run: |
          echo "üì¶ Installing PHP dependencies via Composer..."
          cd src
          composer install --prefer-dist --no-interaction --optimize-autoloader
          echo "‚úÖ Composer dependencies installed"

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîë Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üîß Build and Push Docker Image
        run: |
          echo "üîß Building Docker image from src/Dockerfile..."
          docker build -t $DOCKER_IMAGE:latest -f src/Dockerfile ./src
          echo "‚úÖ Docker image built"
          echo "üöÄ Pushing Docker image to Docker Hub..."
          docker push $DOCKER_IMAGE:latest
          echo "‚úÖ Docker image pushed"

  deploy:
    name: üöÄ Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: üì§ SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          envs: DOCKER_IMAGE,PROJECT_DIR,POSTGRESQL_DATABASE,POSTGRESQL_USERNAME,POSTGRESQL_PASSWORD,REDIS_PASSWORD,DO_SERVER_IP
          script: |
            set -e

            echo "üìÇ Creating project directory at $PROJECT_DIR..."
            mkdir -p $PROJECT_DIR && cd $PROJECT_DIR
            echo "‚úÖ Moved into project directory"

            echo "üì¶ Docker image: $DOCKER_IMAGE"

            echo "üîç Checking Docker installation..."
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker and docker-compose..."
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
              echo "‚úÖ Docker installed"
            else
              echo "‚úÖ Docker already installed"
            fi

            echo "üîÑ Cloning or updating the repo..."
            if [ ! -d ".git" ]; then
              git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
              echo "‚úÖ Repository cloned"
            else
              git reset --hard
              git pull origin main
              echo "‚úÖ Code updated"
            fi

            if ! command -v envsubst &> /dev/null; then
              echo "üîß Installing envsubst for template rendering..."
              sudo apt update && sudo apt install -y gettext
              echo "‚úÖ envsubst installed"
            else
              echo "‚úÖ envsubst already installed"
            fi

            echo "üìú Exporting environment variables for substitution..."
            export POSTGRESQL_DATABASE="${{ secrets.POSTGRESQL_DATABASE }}"
            export POSTGRESQL_USERNAME="${{ secrets.POSTGRESQL_USERNAME }}"
            export POSTGRESQL_PASSWORD="${{ secrets.POSTGRESQL_PASSWORD }}"
            export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
            export DO_SERVER_IP="${{ secrets.DO_SERVER_IP }}"
            echo "‚úÖ Environment variables exported"

            echo "üìú Rendering .env files from templates..."
            if [ ! -f ".env" ]; then
                envsubst < .env.example > .env
                echo "‚úÖ .env created"
            else
                echo "‚úÖ .env exists ‚Äî skipping creation"
            fi
            if [ ! -f "src/.env" ]; then
                envsubst < src/.env.example > src/.env
                echo "‚úÖ Laravel .env created"
            else
                echo "‚úÖ Laravel .env already exists ‚Äî skipping"
            fi

            echo "üîç Validating .env files..."
            if grep -E '\$\{[A-Z_]+\}' .env src/.env; then
                echo "‚ùå Unresolved variables found in .env files!"
                exit 1
            else
                echo "‚úÖ All environment variables resolved"
            fi

            echo "üõë Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            echo "‚úÖ Containers stopped"

            echo "üßπ Cleaning up old Docker resources..."
            docker system prune -af
            echo "‚úÖ Docker cleaned"

            echo "üì• Pulling latest image..."
            docker pull $DOCKER_IMAGE:latest
            echo "‚úÖ Image pulled"

            echo "üöÄ Starting containers..."
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            echo "‚úÖ Containers started"

            echo "üîê Checking APP_KEY..."
            KEY=$(docker exec user_service_app php artisan config:get app.key)

            if [ -z "$KEY" ] || [ "$KEY" = "null" ]; then
                echo "‚ö° No APP_KEY found. Generating..."
                docker exec user_service_app php artisan key:generate --force
                echo "‚úÖ APP_KEY generated"
            else
                echo "‚úÖ APP_KEY already set"
            fi

            echo "üîó Linking storage if missing..."
            docker exec user_service_app bash -c '[ -L public/storage ] || php artisan storage:link'
            echo "‚úÖ storage link ensured"

            echo "‚è≥ Waiting for Laravel to be ready..."
            attempts=0
            until docker exec user_service_app php artisan migrate:status > /dev/null 2>&1; do
                attempts=$((attempts+1))
                echo "‚åõ Attempt $attempts: Laravel not ready..."
                if [ "$attempts" -ge 10 ]; then
                    echo "‚ùå Timeout: Laravel not ready after $attempts attempts"
                    docker logs user_service_app
                    exit 1
                fi
                sleep 5
            done
            echo "‚úÖ Laravel is ready"

            echo "üì¶ Running Laravel migrations..."
            docker exec user_service_app php artisan migrate --force
            echo "‚úÖ Migrations completed"

            echo "üîê Setting up Passport if needed..."
            if ! docker exec user_service_app test -f storage/oauth-private.key; then
                docker exec user_service_app php artisan passport:install --force
                echo "‚úÖ Passport keys & clients generated"
            else
                echo "‚úÖ Passport already installed"
            fi

            echo "‚ö° Clearing and caching config..."
            docker exec user_service_app php artisan optimize:clear
            docker exec user_service_app php artisan config:cache
            docker exec user_service_app php artisan route:cache
            echo "‚úÖ Config and routes cached"

            echo "üéâ Deployment complete!"
