name: Laravel Full CI/CD with Docker & DigitalOcean

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: laravel-app
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-test:
    name: 🏗 Build, Test & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠 Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: 📦 Install Dependencies
        run: |
          cd src
          composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Build and Push Docker Image (With Caching)
        run: |
          docker build --cache-from=type=registry,ref=$DOCKER_IMAGE:latest \
          --build-arg APP_ENV=production -t $DOCKER_IMAGE:latest -f php/Dockerfile .
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: 🚀 Fully Automated Deployment to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📤 Deploy & Setup Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e  # Exit immediately if a command fails

            echo "🚀 Starting Deployment on DigitalOcean"

            # Set project directory
            export PROJECT_DIR="/var/www/user-service"
            echo "📂 Using PROJECT_DIR: $PROJECT_DIR"
            mkdir -p $PROJECT_DIR && cd $PROJECT_DIR

            # Export environment variables
            export DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/user-service-app:latest"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            export MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}"
            export MYSQL_USER="${{ secrets.MYSQL_USER }}"
            export MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}"

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # Pull latest changes
            if [ ! -d ".git" ]; then
              echo "📥 Cloning Repository..."
              git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
            else
              echo "📥 Pulling Latest Code..."
              git reset --hard origin/main
              git pull --rebase origin main
            fi

            # Ensure deployment/.env.prod file exists and populate it with necessary values
            echo "📜 Creating deployment/.env.prod file..."
            cat > deployment/.env.prod <<EOF
            MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE=${MYSQL_DATABASE}
            MYSQL_USER=${MYSQL_USER}
            MYSQL_PASSWORD=${MYSQL_PASSWORD}
            EOF
            echo "✅ .env.prod file created in deployment/"

            # Ensure src/.env file exists and populate it with necessary values
            echo "📜 Creating .env file..."
            cat > src/.env <<EOF
            APP_NAME=LaravelApp
            APP_ENV=production
            APP_KEY=
            APP_DEBUG=false
            APP_URL=https://yourdomain.com

            DB_CONNECTION=mysql
            DB_HOST=user_service_mysql
            DB_PORT=3306
            DB_DATABASE=${MYSQL_DATABASE}
            DB_USERNAME=${MYSQL_USER}
            DB_PASSWORD=${MYSQL_PASSWORD}

            CACHE_DRIVER=file
            SESSION_DRIVER=database
            QUEUE_CONNECTION=sync
            EOF
            echo "✅ .env file created in src/"

            # Stop old containers and clean up Docker
            echo "🛑 Stopping old containers..."
            docker-compose -f deployment/docker-compose.prod.yml down --remove-orphans
            docker system prune -af  # Clean up old Docker images

            # Pull and start new containers
            echo "🐳 Pulling latest Docker image..."
            docker pull $DOCKER_IMAGE

            echo "🐳 Starting new containers..."
            docker-compose -f deployment/docker-compose.prod.yml up -d --remove-orphans

            # Wait for MySQL to be ready
            MYSQL_CONTAINER="user_service_mysql"
            echo "⌛ Waiting for MySQL to be ready..."
            until docker exec $MYSQL_CONTAINER mysqladmin ping -h "localhost" --silent; do
                echo "⏳ MySQL is still starting..."
                sleep 5
            done
            echo "✅ MySQL is ready!"

            # Ensure Database Exists
            echo "🛢 Checking if database exists..."
            DB_EXISTS=$(docker exec $MYSQL_CONTAINER mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -e "SHOW DATABASES LIKE '${MYSQL_DATABASE}';" | grep "${MYSQL_DATABASE}" | wc -l)

            if [ "$DB_EXISTS" -eq "0" ]; then
                echo "🚀 Creating database: ${MYSQL_DATABASE}"
                docker exec $MYSQL_CONTAINER mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -e "CREATE DATABASE ${MYSQL_DATABASE};"
            else
                echo "✅ Database ${MYSQL_DATABASE} already exists!"
            fi

            # Ensure MySQL User Exists & Set Permissions
            echo "🔧 Checking MySQL user permissions..."
            USER_EXISTS=$(docker exec $MYSQL_CONTAINER mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -sse "
            SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '${MYSQL_USER}');")

            if [ "$USER_EXISTS" -eq "0" ]; then
                echo "🚀 Creating MySQL user '${MYSQL_USER}'..."
                docker exec $MYSQL_CONTAINER mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -e "
                CREATE USER '${MYSQL_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${MYSQL_PASSWORD}';
                GRANT ALL PRIVILEGES ON ${MYSQL_DATABASE}.* TO '${MYSQL_USER}'@'%';
                FLUSH PRIVILEGES;"
            else
                echo "✅ MySQL user '${MYSQL_USER}' already exists. Updating password..."
                docker exec $MYSQL_CONTAINER mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -e "
                ALTER USER '${MYSQL_USER}'@'%' IDENTIFIED WITH mysql_native_password BY '${MYSQL_PASSWORD}';
                FLUSH PRIVILEGES;"
            fi

            # Run key generate
            echo "🔄 Running key generate..."
            docker exec user_service_app php artisan key:generate

            # Run Laravel Migrations
            echo "🔄 Running database migrations..."
            docker exec user_service_app php artisan migrate --force

            # Fix File Permissions
            echo "🔧 Fixing storage permissions..."
            docker exec user_service_app chmod -R 777 storage bootstrap/cache

            # Restart Services
            echo "🔄 Restarting application..."
            docker restart user_service_app
            docker restart user_service_nginx

            echo "✅ Deployment complete!"
