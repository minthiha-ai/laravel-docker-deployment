name: Laravel CI/CD for API (Docker + DigitalOcean)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-push:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üõ† Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: üì¶ Install Dependencies
        run: |
          cd src
          composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîë Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üîß Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:latest -f src/Dockerfile ./src
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: üöÄ Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: üì§ SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          envs: DOCKER_IMAGE,PROJECT_DIR,POSTGRESQL_DATABASE,POSTGRESQL_USERNAME,POSTGRESQL_PASSWORD,REDIS_PASSWORD,DO_SERVER_IP
          script: |
            set -e

            echo "üìÇ Setting up $PROJECT_DIR"
            mkdir -p $PROJECT_DIR && cd $PROJECT_DIR

            echo "üì¶ Using Docker image: $DOCKER_IMAGE"

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker..."
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # Pull latest repo code
            if [ ! -d ".git" ]; then
              echo "üåÄ Cloning repository..."
              git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
            else
              echo "üîÑ Updating code..."
              git reset --hard
              git pull origin main
            fi

            # Ensure envsubst is available
            if ! command -v envsubst &> /dev/null; then
              echo "üîß Installing envsubst..."
              sudo apt update && sudo apt install -y gettext
            fi

            echo "üìú Exporting secrets for envsubst"
            export POSTGRESQL_DATABASE="${POSTGRESQL_DATABASE}"
            export POSTGRESQL_USERNAME="${POSTGRESQL_USERNAME}"
            export POSTGRESQL_PASSWORD="${POSTGRESQL_PASSWORD}"
            export REDIS_PASSWORD="${REDIS_PASSWORD}"
            export DO_SERVER_IP="${DO_SERVER_IP}"

            echo "üìú Creating .env files from templates"
            envsubst < .env.example > .env
            envsubst < src/.env.example > src/.env

            echo "‚úÖ Validating .env files for unresolved variables"
            grep -E '\$\{[A-Z_]+\}' .env src/.env && {
              echo "‚ùå Unresolved variables found in .env files!"
              exit 1
            } || echo "‚úÖ All variables are correctly substituted"

            echo "üõë Stopping existing containers"
            docker-compose -f docker-compose.prod.yml down --remove-orphans

            echo "üßπ Cleaning Docker cache"
            docker system prune -af

            echo "üê≥ Pulling latest image"
            docker pull $DOCKER_IMAGE:latest

            echo "üöÄ Starting containers"
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "üîê Generating APP_KEY"
            docker exec user_service_app php artisan key:generate --force

            echo "üîó Ensuring storage link exists"
            docker exec user_service_app bash -c '[ -L public/storage ] || php artisan storage:link'

            echo "‚è≥ Waiting for Laravel to be ready..."
            attempts=0
            until docker exec user_service_app php artisan migrate:status > /dev/null 2>&1; do
              attempts=$((attempts+1))
              echo "‚åõ Attempt $attempts: Laravel not ready..."
              if [ "$attempts" -ge 20 ]; then
                echo "‚ùå Timeout: Laravel not ready after $attempts attempts"
                docker logs user_service_app
                exit 1
              fi
              sleep 5
            done
            echo "‚úÖ Laravel is ready!"

            echo "üì¶ Running migrations"
            docker exec user_service_app php artisan migrate --force

            echo "üîß Optimizing config & routes"
            docker exec user_service_app php artisan optimize:clear
            docker exec user_service_app php artisan config:cache
            docker exec user_service_app php artisan route:cache

            echo "‚úÖ Deployment Completed!"
