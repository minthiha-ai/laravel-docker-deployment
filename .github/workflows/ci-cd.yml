name: Laravel Full CI/CD with Docker & DigitalOcean

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: laravel-app
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-test:
    name: 🏗 Build, Test & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠 Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: 📦 Install Dependencies
        run: |
          cd src
          composer install --prefer-dist --no-interaction --optimize-autoloader

      # Uncomment if you want to run tests
      # - name: 🧪 Run Tests
      #   run: |
      #     cd src
      #     vendor/bin/phpunit

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Build and Push Docker Image (With Caching)
        run: |
          docker build --cache-from=type=registry,ref=$DOCKER_IMAGE:latest \
          --build-arg APP_ENV=production -t $DOCKER_IMAGE:latest -f php/Dockerfile .
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: 🚀 Fully Automated Deployment to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📤 Deploy & Setup Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            echo "🚀 Starting Deployment on DigitalOcean..."

            # Explicitly set PROJECT_DIR inside SSH session
            export PROJECT_DIR="/var/www/user-service"
            echo "Using PROJECT_DIR: $PROJECT_DIR"

            # Ensure the project directory exists
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "📂 Creating project directory..."
              sudo mkdir -p $PROJECT_DIR
              sudo chown -R $USER:$USER $PROJECT_DIR
            else
              echo "✅ Project directory already exists: $PROJECT_DIR"
            fi

            cd $PROJECT_DIR

            # Install dependencies if not installed (one-time setup)
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo usermod -aG docker $USER
              sudo systemctl daemon-reload
              sudo systemctl restart docker
            fi

            # Ensure correct project directory
            cd $PROJECT_DIR

            # If .git does not exist, initialize repo properly
            if [ ! -d ".git" ]; then
                echo "📥 Cloning Repository..."
                git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
            else
                echo "📥 Pulling Latest Code..."
                git stash
                git pull --rebase origin main
            fi

            # Check if Deployment Files Exist
            if [ ! -f "deployment/docker-compose.prod.yml" ]; then
                echo "❌ Error: deployment/docker-compose.prod.yml is missing!"
                exit 1
            fi

            if [ ! -f "deployment/.env.prod" ]; then
                echo "❌ Error: deployment/.env.prod file is missing!"
                exit 1
            fi

            # Ensure .env is copied to the correct location
            cp deployment/.env.prod $PROJECT_DIR/.env
            echo "✅ Environment variables set up at $PROJECT_DIR/.env"

            # Stop Old Containers
            echo "🐳 Stopping existing containers..."
            docker-compose -f deployment/docker-compose.prod.yml down --remove-orphans

            # Remove old Docker images to free space
            echo "🧹 Cleaning up old Docker images..."
            docker system prune -af

            # Pull Latest Docker Image
            echo "🐳 Pulling latest Docker image..."
            docker pull $DOCKER_IMAGE:latest

            # Start New Containers
            echo "🐳 Starting new containers..."
            docker-compose -f deployment/docker-compose.prod.yml up -d --remove-orphans

            # Verify Running Containers
            echo "📊 Checking running containers..."
            docker ps -a

            # Run Database Migrations
            echo "🔄 Running database migrations..."
            docker exec user_service_app php artisan migrate --force

            # Fix Permissions (Corrected Container Name)
            echo "🔧 Fixing storage & permissions..."
            docker exec user_service_app chmod -R 777 storage bootstrap/cache

            echo "✅ Deployment complete!"
