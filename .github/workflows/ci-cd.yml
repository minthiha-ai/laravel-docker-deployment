name: Laravel Full CI/CD with Docker & DigitalOcean

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: laravel-app
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-test:
    name: üèó Build, Test & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üõ† Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: üì¶ Install Dependencies
        run: |
          cd src
          composer install --prefer-dist --no-interaction --optimize-autoloader

      # Uncomment if you want to run tests
      # - name: üß™ Run Tests
      #   run: |
      #     cd src
      #     vendor/bin/phpunit

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîë Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üì¶ Build and Push Docker Image (With Caching)
        run: |
          docker build --cache-from=type=registry,ref=$DOCKER_IMAGE:latest \
          --build-arg APP_ENV=production -t $DOCKER_IMAGE:latest -f php/Dockerfile .
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: üöÄ Fully Automated Deployment to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: üì§ Deploy & Setup Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            echo "üöÄ Starting Deployment on DigitalOcean..."

            # Set Project Directory
            export PROJECT_DIR="/var/www/user-service"
            echo "Using PROJECT_DIR: $PROJECT_DIR"

            # Ensure the project directory exists
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "üìÇ Creating project directory..."
              sudo mkdir -p $PROJECT_DIR
              sudo chown -R $USER:$USER $PROJECT_DIR
            else
              echo "‚úÖ Project directory already exists: $PROJECT_DIR"
            fi

            cd $PROJECT_DIR

            # Install dependencies if not installed
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker..."
              sudo apt update && sudo apt install -y docker.io docker-compose
              sudo usermod -aG docker $USER
              sudo systemctl restart docker
            fi

            # Ensure correct project directory
            cd $PROJECT_DIR

            # Clone repo if missing, otherwise pull latest changes
            if [ ! -d ".git" ]; then
                echo "üì• Cloning Repository..."
                git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
            else
                echo "üì• Pulling Latest Code..."
                git stash
                git pull --rebase origin main
            fi

            # Ensure necessary deployment files exist
            if [ ! -f "deployment/docker-compose.prod.yml" ]; then
                echo "‚ùå Error: deployment/docker-compose.prod.yml is missing!"
                exit 1
            fi

            if [ ! -f "deployment/.env.prod" ]; then
                echo "‚ùå Error: deployment/.env.prod file is missing!"
                exit 1
            fi

            # Ensure `.env` is correctly placed
            cp deployment/.env.prod src/.env
            echo "‚úÖ Environment variables set up at $PROJECT_DIR/src/.env"

            # Stop Old Containers
            echo "üê≥ Stopping existing containers..."
            docker-compose -f deployment/docker-compose.prod.yml down --remove-orphans

            # Remove old Docker images
            echo "üßπ Cleaning up old Docker images..."
            docker system prune -af

            # Pull Latest Docker Image
            echo "üê≥ Pulling latest Docker image..."
            docker pull $DOCKER_IMAGE:latest

            # Start New Containers
            echo "üê≥ Starting new containers..."
            docker-compose -f deployment/docker-compose.prod.yml up -d --remove-orphans

            # Wait for MySQL to be ready
            MYSQL_CONTAINER="user_service_mysql"
            echo "‚åõ Waiting for MySQL to be ready..."
            until docker exec $MYSQL_CONTAINER mysqladmin ping -h "localhost" --silent; do
                echo "‚è≥ MySQL is not ready yet..."
                sleep 5
            done
            echo "‚úÖ MySQL is ready!"

            # Check if database exists, create if necessary
            echo "üõ¢ Checking if database exists..."
            DB_EXISTS=$(docker exec $MYSQL_CONTAINER mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES LIKE '${{ secrets.MYSQL_DATABASE }}';" | grep "${{ secrets.MYSQL_DATABASE }}" | wc -l)
            if [ "$DB_EXISTS" -eq "0" ]; then
              echo "üöÄ Creating database: ${{ secrets.MYSQL_DATABASE }}"
              docker exec $MYSQL_CONTAINER mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "CREATE DATABASE ${{ secrets.MYSQL_DATABASE }};"
            else
              echo "‚úÖ Database ${{ secrets.MYSQL_DATABASE }} already exists!"
            fi

            # Ensure correct MySQL user permissions
            echo "üîß Setting MySQL permissions..."
            docker exec $MYSQL_CONTAINER mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "ALTER USER '${{ secrets.MYSQL_USER }}'@'%' IDENTIFIED WITH mysql_native_password BY '${{ secrets.MYSQL_PASSWORD }}';"
            docker exec $MYSQL_CONTAINER mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "GRANT ALL PRIVILEGES ON ${{ secrets.MYSQL_DATABASE }}.* TO '${{ secrets.MYSQL_USER }}'@'%';"
            docker exec $MYSQL_CONTAINER mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "FLUSH PRIVILEGES;"

            # Run Laravel Migrations
            echo "üîÑ Running database migrations..."
            docker exec user_service_app php artisan migrate --force

            # Fix Permissions
            echo "üîß Fixing storage & permissions..."
            docker exec user_service_app chmod -R 777 storage bootstrap/cache storage/logs storage/framework

            echo "‚úÖ Deployment complete!"
