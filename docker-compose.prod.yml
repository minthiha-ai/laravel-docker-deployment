name: Laravel CI/CD for API (Docker + DigitalOcean)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/user-service-app
  PROJECT_DIR: /var/www/user-service

jobs:
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔑 Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔧 Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:latest -f src/Dockerfile ./src
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: 🚀 Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: 📤 SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e

            echo "📁 Setting up project at $PROJECT_DIR"
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "📁 Project directory doesn't exist, creating..."
              mkdir -p $PROJECT_DIR
            fi
            cd $PROJECT_DIR

            echo "📦 Cloning / Pulling latest code..."
            if [ ! -d ".git" ]; then
              git clone https://github.com/minthiha-ai/laravel-docker-deployment.git .
            else
              git reset --hard
              git pull origin main
            fi

            echo "📜 Checking root .env file for docker-compose"
            if [ ! -f ".env" ]; then
              echo "Creating .env..."
              cat > .env <<EOF
              POSTGRESQL_DATABASE=${{ secrets.POSTGRESQL_DATABASE }}
              POSTGRESQL_USERNAME=${{ secrets.POSTGRESQL_USERNAME }}
              POSTGRESQL_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }}
              REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
              EOF
            fi

            echo "📜 Checking src/.env file for Laravel"
            if [ ! -f "src/.env" ]; then
              echo "Creating src/.env..."
              cat > src/.env <<EOF
              APP_NAME=UserService
              APP_ENV=production
              APP_KEY=
              APP_DEBUG=false
              APP_URL=http://${{ secrets.DO_SERVER_IP }}

              LOG_CHANNEL=stack
              LOG_LEVEL=debug

              DB_CONNECTION=pgsql
              DB_HOST=db
              DB_PORT=5432
              DB_DATABASE=${{ secrets.POSTGRESQL_DATABASE }}
              DB_USERNAME=${{ secrets.POSTGRESQL_USERNAME }}
              DB_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }}

              REDIS_CLIENT=phpredis
              REDIS_HOST=redis
              REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
              REDIS_PORT=6379

              CACHE_STORE=redis
              QUEUE_CONNECTION=database
              SESSION_DRIVER=database
              EOF
            fi

            echo "🛑 Stopping existing containers"
            docker compose -f docker-compose.prod.yml down --remove-orphans

            echo "🧹 Cleaning up Docker"
            docker system prune -af

            echo "🐳 Pulling latest image"
            docker pull $DOCKER_IMAGE:latest

            echo "🚀 Starting containers"
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "⏱ Waiting for DB (PostgreSQL) to be ready..."
            until docker exec user_service_app php artisan migrate:status > /dev/null 2>&1; do
              echo "⌛ Still waiting..."
              sleep 5
            done

            echo "🔑 Checking if APP_KEY exists"
            if [ -z "$(docker exec user_service_app php -r "echo env('APP_KEY');")" ]; then
              echo "No APP_KEY found. Generating..."
              docker exec user_service_app php artisan key:generate --force
            else
              echo "✅ APP_KEY already set. Skipping generation."
            fi

            echo "🛠 Running migrations"
            docker exec user_service_app php artisan migrate --force

            echo "🧼 Caching config & routes"
            docker exec user_service_app php artisan optimize:clear
            docker exec user_service_app php artisan config:cache
            docker exec user_service_app php artisan route:cache

            echo "✅ Deployment Completed!"
